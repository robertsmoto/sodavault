# Generated by Django 3.2 on 2022-09-09 08:13

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='Is required and must be unique.', unique=True)),
                ('name', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=100)),
                ('kwd_list', models.CharField(blank=True, help_text='Comma-separated values.', max_length=100)),
                ('is_primary', models.BooleanField(default=False)),
                ('is_secondary', models.BooleanField(default=False)),
                ('is_tertiary', models.BooleanField(default=False)),
                ('order', models.IntegerField(default=0)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='contactapp.category')),
            ],
            options={
                'verbose_name_plural': '__ categories',
                'ordering': ['slug'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_type', models.CharField(blank=True, choices=[('COMP', 'Company'), ('STOR', 'Store'), ('SUPP', 'Supplier'), ('WARE', 'Warehouse'), ('WEBS', 'Website')], max_length=4)),
                ('name', models.CharField(blank=True, max_length=200)),
                ('phone', models.CharField(blank=True, max_length=200)),
                ('domain', models.CharField(blank=True, max_length=200, verbose_name='Domain eg. example.com')),
                ('website', models.CharField(blank=True, max_length=200)),
                ('address_01', models.CharField(blank=True, max_length=200)),
                ('address_02', models.CharField(blank=True, max_length=200)),
                ('city', models.CharField(blank=True, max_length=200)),
                ('state', models.CharField(blank=True, max_length=200)),
                ('zipcode', models.CharField(blank=True, max_length=200)),
                ('ship_address_01', models.CharField(blank=True, max_length=200)),
                ('ship_address_02', models.CharField(blank=True, max_length=200)),
                ('ship_city', models.CharField(blank=True, max_length=200)),
                ('ship_state', models.CharField(blank=True, max_length=200)),
                ('ship_zipcode', models.CharField(blank=True, max_length=200)),
                ('categories', models.ManyToManyField(blank=True, to='contactapp.Category')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='Is required and must be unique.', unique=True)),
                ('name', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=100)),
                ('kwd_list', models.CharField(blank=True, help_text='Comma-separated values.', max_length=100)),
                ('is_primary', models.BooleanField(default=False)),
                ('is_secondary', models.BooleanField(default=False)),
                ('is_tertiary', models.BooleanField(default=False)),
                ('order', models.IntegerField(default=0)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='contactapp.tag')),
            ],
            options={
                'verbose_name_plural': '__ tags',
                'ordering': ['slug'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('person_type', models.CharField(blank=True, choices=[('CUST', 'Customer'), ('CONT', 'Contact')], max_length=4)),
                ('firstname', models.CharField(blank=True, max_length=200)),
                ('lastname', models.CharField(blank=True, max_length=200)),
                ('nickname', models.CharField(blank=True, max_length=200)),
                ('phone', models.CharField(blank=True, max_length=200)),
                ('mobile', models.CharField(blank=True, max_length=200)),
                ('email', models.CharField(blank=True, max_length=200)),
                ('website', models.CharField(blank=True, max_length=200)),
                ('address_01', models.CharField(blank=True, max_length=200)),
                ('address_02', models.CharField(blank=True, max_length=200)),
                ('city', models.CharField(blank=True, max_length=200)),
                ('state', models.CharField(blank=True, max_length=200)),
                ('zipcode', models.CharField(blank=True, max_length=200)),
                ('ship_address_01', models.CharField(blank=True, max_length=200)),
                ('ship_address_02', models.CharField(blank=True, max_length=200)),
                ('ship_city', models.CharField(blank=True, max_length=200)),
                ('ship_state', models.CharField(blank=True, max_length=200)),
                ('ship_zipcode', models.CharField(blank=True, max_length=200)),
                ('categories', models.ManyToManyField(blank=True, to='contactapp.Category')),
                ('locations', models.ManyToManyField(blank=True, to='contactapp.Location')),
                ('tags', models.ManyToManyField(blank=True, to='contactapp.Tag')),
            ],
        ),
        migrations.AddField(
            model_name='location',
            name='tags',
            field=models.ManyToManyField(blank=True, to='contactapp.Tag'),
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('contactapp.location',),
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('contactapp.person',),
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('contactapp.person',),
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('contactapp.location',),
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('contactapp.location',),
        ),
        migrations.CreateModel(
            name='Warehouse',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('contactapp.location',),
        ),
        migrations.CreateModel(
            name='Website',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('contactapp.location',),
        ),
    ]
