# Generated by Django 3.2 on 2022-02-25 13:57

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('configapp', '0011_alter_profile_cdn_dir'),
    ]

    operations = [
        migrations.AlterField(
            model_name='profile',
            name='cdn_dir',
            field=models.CharField(default='edc3f5a5-ae08', help_text='User root cdn dir.eg. https://cdn.sodavault.com/image_dir/Y/m/d/image.webp', max_length=20),
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='Is required and must be unique.', unique=True)),
                ('name', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=100)),
                ('kwd_list', models.CharField(blank=True, help_text='Comma-separated values.', max_length=100)),
                ('is_primary', models.BooleanField(default=False)),
                ('is_secondary', models.BooleanField(default=False)),
                ('is_tertiary', models.BooleanField(default=False)),
                ('order', models.IntegerField(blank=True, null=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subgroups', to='configapp.tag')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='Is required and must be unique.', unique=True)),
                ('name', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=100)),
                ('kwd_list', models.CharField(blank=True, help_text='Comma-separated values.', max_length=100)),
                ('is_primary', models.BooleanField(default=False)),
                ('is_secondary', models.BooleanField(default=False)),
                ('is_tertiary', models.BooleanField(default=False)),
                ('order', models.IntegerField(blank=True, null=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subgroups', to='configapp.category')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='store',
            name='categories',
            field=models.ManyToManyField(blank=True, to='configapp.Category'),
        ),
        migrations.AddField(
            model_name='store',
            name='tags',
            field=models.ManyToManyField(blank=True, to='configapp.Tag'),
        ),
        migrations.AddField(
            model_name='supplier',
            name='categories',
            field=models.ManyToManyField(blank=True, to='configapp.Category'),
        ),
        migrations.AddField(
            model_name='supplier',
            name='tags',
            field=models.ManyToManyField(blank=True, to='configapp.Tag'),
        ),
        migrations.AddField(
            model_name='warehouse',
            name='categories',
            field=models.ManyToManyField(blank=True, to='configapp.Category'),
        ),
        migrations.AddField(
            model_name='warehouse',
            name='tags',
            field=models.ManyToManyField(blank=True, to='configapp.Tag'),
        ),
        migrations.AddField(
            model_name='website',
            name='categories',
            field=models.ManyToManyField(blank=True, to='configapp.Category'),
        ),
        migrations.AddField(
            model_name='website',
            name='tags',
            field=models.ManyToManyField(blank=True, to='configapp.Tag'),
        ),
    ]
